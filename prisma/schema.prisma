// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users -----------------------------------------------------------------------

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  fullName      String
  nickname      String?
  password      String
  imageUrl      String?
  createdAt     DateTime @default(now())
  // A User can have many Pets
  pets          Pet[]
  // A User can favorite many Foods
  favoriteFoods Food[]
}

// Pets -----------------------------------------------------------------------

enum Species {
  cat
  dog
}

enum Sex {
  female
  male
}

model Pet {
  id               String            @id @default(uuid())
  name             String
  birthDate        DateTime
  imageUrl         String?
  intact           Boolean
  // Enumerated Type ( cat | dog )
  species          Species
  // Enumerated Type ( female | male )
  sex              Sex
  // A Pet must have a Diet Type
  dietType         DietType          @relation(fields: [dietTypeId], references: [id])
  dietTypeId       Int
  // A Pet must have Meal Plan
  mealPlan         MealPlan          @relation(fields: [mealPlanId], references: [id])
  mealPlanId       String
  // A Pet can have many Dietary Restrictions
  dietRestrictions DietRestriction[]
  // A Pet can have many Weight Values
  WeightHistory    Weight[]
  // A Pet belongs to a User
  User             User              @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime          @default(now())
}

model Weight {
  id               String   @id @default(uuid())
  date             DateTime @default(now())
  valueInKilograms Float
  // A Weight belongs to a Pet
  pet              Pet      @relation(fields: [petId], references: [id])
  petId            String
}

// Diets ----------------------------------------------------------------------

model DietType {
  id         Int    @id @default(autoincrement())
  name       String
  multiplier Float
  // A Diet Type can belong to many Pets
  pets       Pet[]
}

model DietRestriction {
  id   Int    @id @default(autoincrement())
  name String
  // A Pet can have many dietary restrictions
  pets Pet[]
  // A Food can meet many dietary restrictions
  Food Food[]
}

// Meal Planning --------------------------------------------------------------
model Food {
  id               String            @id @default(uuid())
  name             String?
  // Calories per kilogram
  kilogramCalories Int
  // A Food can have many Servings
  Serving          Serving[]
  // A Food can meet many Dietary Restrictions
  dietRestrictions DietRestriction[]
  // A Food can be favorited by many Users
  userFavorites    User[]
}

model Serving {
  id          String @id @default(uuid())
  sortOrder   Int
  sizeInGrams Int
  // A Serving belongs to a Meal
  Meal        Meal   @relation(fields: [mealId], references: [id])
  mealId      String
  // A Serving belongs to a Food
  food        Food   @relation(fields: [foodId], references: [id])
  foodId      String
}

model Meal {
  id         String    @id @default(uuid())
  name       String?
  sortOrder  Int
  // A Meal belongs to a Meal Plan
  MealPlan   MealPlan? @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
  // A Meal can have many Servings
  servings   Serving[]
}

model MealPlan {
  id    String  @id @default(uuid())
  name  String?
  // A Meal Plan can belong to many Pets
  pets  Pet[]
  // A Meal Plan can have many Meals
  meals Meal[]
}
